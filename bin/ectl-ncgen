#!/usr/bin/env python3
##############################################################################
# Copyright (c) 2013, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
#
# This file is part of Spack.
# Written by Todd Gamblin, tgamblin@llnl.gov, All rights reserved.
# LLNL-CODE-647188
#
# For details, see https://github.com/llnl/spack
# Please also see the LICENSE file for our notice and the LGPL.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License (as published by
# the Free Software Foundation) version 2.1 dated February 1999.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
# conditions of the GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##############################################################################

import os
import sys
import warnings
import llnl.util.tty as tty
from llnl.util.tty.color import *
import argparse

# Command parsing
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description="Ectl: Control ModelE.")

parser.add_argument('-d', '--debug', action='store_true',
                    help="Write out debug logs during compile")
parser.add_argument('-v', '--verbose', action='store_true',
                    help="Print additional output during builds")
#parser.add_argument('-V', '--version', action='version',
#                    version="%s" % ectl.ectl_version)

# each command module implements a parser() function, to which we pass its
# subparser for setup.
subparsers = parser.add_subparsers(metavar='SUBCOMMAND', dest="command")

import ectl.cmd
for cmd in ectl.cmd.commands:
    module = ectl.cmd.get_module(cmd)
    subparser = subparsers.add_parser(cmd, help=module.description)
    module.setup_parser(subparser)

# Just print help and exit if run with no arguments at all
if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

# actually parse the args.
args,unknown_args = parser.parse_known_args()
print('args', args.__dict__)

def main():
    # Set up environment based on args.
    tty.set_verbose(args.verbose)
    tty.set_debug(args.debug)
    ectl.debug = args.debug

    # Try to load the particular command asked for and run it
    command = ectl.cmd.get_command(args.command)
    try:
        return_val = command(parser, args, unknown_args)
    except KeyboardInterrupt:
        sys.stderr.write('\n')
        tty.die("Keyboard interrupt.")


    # Allow commands to return values if they want to exit with some other code.
    if return_val is None:
        sys.exit(0)
    elif isinstance(return_val, int):
        sys.exit(return_val)
    else:
        tty.die("Bad return value from command %s: %s" % (args.command, return_val))
main()
